// <auto-generated />
using System;
using HackYeah.Backend.Keystore.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HackYeah.Backend.Keystore.Data.Migrations
{
    [DbContext(typeof(KeystoreContext))]
    [Migration("20230930224951_UnUniquefy")]
    partial class UnUniquefy
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("HackYeah.Backend.Keystore.Data.DbCertificate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("CommonName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("cn");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("data");

                    b.Property<Guid>("KeyPairId")
                        .HasColumnType("TEXT")
                        .HasColumnName("keypair");

                    b.Property<string>("Thumbprint")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("thumbprint");

                    b.HasKey("Id")
                        .HasName("pkey_certiifcates_id");

                    b.HasAlternateKey("Thumbprint")
                        .HasName("ukey_certificates_thumbprint");

                    b.HasIndex("CommonName")
                        .HasDatabaseName("ix_certificates_cn");

                    b.HasIndex("KeyPairId")
                        .HasDatabaseName("ix_certificates_keypair");

                    b.ToTable("certificates", (string)null);
                });

            modelBuilder.Entity("HackYeah.Backend.Keystore.Data.DbCryptoKeyMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<byte[]>("PrivateKey")
                        .HasColumnType("BLOB")
                        .HasColumnName("priv");

                    b.Property<byte[]>("PublicKey")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("pub");

                    b.Property<uint>("Size")
                        .HasColumnType("INTEGER")
                        .HasColumnName("size");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pkey_key_id");

                    b.HasAlternateKey("Name")
                        .HasName("ukey_key_name");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_key_name");

                    b.HasIndex("Size")
                        .HasDatabaseName("ix_key_size");

                    b.HasIndex("Type")
                        .HasDatabaseName("ix_key_type");

                    b.ToTable("keys", (string)null);
                });

            modelBuilder.Entity("HackYeah.Backend.Keystore.Data.DbCertificate", b =>
                {
                    b.HasOne("HackYeah.Backend.Keystore.Data.DbCryptoKeyMaterial", "KeyPair")
                        .WithMany("Certificates")
                        .HasForeignKey("KeyPairId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fkey_certificates_keypair");

                    b.Navigation("KeyPair");
                });

            modelBuilder.Entity("HackYeah.Backend.Keystore.Data.DbCryptoKeyMaterial", b =>
                {
                    b.Navigation("Certificates");
                });
#pragma warning restore 612, 618
        }
    }
}
